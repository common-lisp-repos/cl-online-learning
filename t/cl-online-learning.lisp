(in-package :cl-user)
(defpackage cl-online-learning-test
  (:use :cl
        :cl-online-learning
	:cl-online-learning.utils
        :prove))
(in-package :cl-online-learning-test)

;; NOTE: To run this test file, execute `(asdf:test-system :cl-online-learning)' in your Lisp.

(defparameter a1a-dim 123)
(defvar a1a)

(plan nil)

(defun approximately-equal (x y &optional (delta 0.001d0))
  (flet ((andf (x y) (and x y))
         (close? (x y) (< (abs (- x y)) delta)))
    (etypecase x
      (double-float (close? x y))
      (vector (reduce #'andf (map 'vector #'close? x y)))
      (list (reduce #'andf (mapcar #'close? x y))))))

;; Test1: read libsvm dataset
(is (progn
      (setf a1a
	    (read-libsvm-data (merge-pathnames
			       #P"t/dataset/a1a"
			       (asdf:system-source-directory :cl-online-learning-test))
			      a1a-dim))
      (car a1a))
    '(-1.0d0
      . #(0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 1.0d0 0.0d0
	  0.0d0 1.0d0 0.0d0 0.0d0 0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0
	  0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0
	  0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0
	  0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0
	  0.0d0 0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0
	  1.0d0 0.0d0 1.0d0 1.0d0 0.0d0 0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 1.0d0 0.0d0
	  0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0
	  0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0
	  0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0
	  0.0d0 0.0d0 0.0d0))
    :test #'equalp)

;; Test2,3: make and train perceptron learner
(defvar perceptron-learner)

(is (progn
      (setf perceptron-learner (make-perceptron a1a-dim))
      (train perceptron-learner a1a)
      (cl-ol::weight-of perceptron-learner))
    #(-5.0d0 -2.0d0 -1.0d0 4.0d0 2.0d0 0.0d0 -1.0d0 1.0d0 5.0d0 2.0d0 -1.0d0 0.0d0
      0.0d0 1.0d0 0.0d0 -3.0d0 -3.0d0 3.0d0 -3.0d0 0.0d0 3.0d0 0.0d0 3.0d0 -3.0d0
      3.0d0 -4.0d0 0.0d0 0.0d0 0.0d0 -1.0d0 -1.0d0 5.0d0 -4.0d0 0.0d0 -7.0d0 0.0d0
      0.0d0 0.0d0 5.0d0 5.0d0 -2.0d0 -2.0d0 0.0d0 -2.0d0 -1.0d0 0.0d0 2.0d0 1.0d0
      -3.0d0 0.0d0 6.0d0 3.0d0 1.0d0 -2.0d0 4.0d0 0.0d0 -5.0d0 -1.0d0 0.0d0 0.0d0
      3.0d0 -1.0d0 3.0d0 -1.0d0 -3.0d0 -3.0d0 2.0d0 0.0d0 -4.0d0 -1.0d0 1.0d0
      -2.0d0 0.0d0 -6.0d0 4.0d0 -5.0d0 3.0d0 -5.0d0 -2.0d0 -2.0d0 4.0d0 3.0d0 2.0d0
      1.0d0 -2.0d0 -2.0d0 0.0d0 -2.0d0 0.0d0 -1.0d0 2.0d0 -1.0d0 1.0d0 -1.0d0
      -1.0d0 0.0d0 0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 0.0d0 -2.0d0 0.0d0 0.0d0 0.0d0
      0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 -1.0d0 0.0d0 0.0d0 0.0d0 0.0d0 1.0d0
      0.0d0 0.0d0 0.0d0 0.0d0 0.0d0)
    :test #'approximately-equal)

(is (cl-ol::bias-of perceptron-learner) -2.0d0 :test #'approximately-equal)

;; Test4: test perceptron learner
(is (multiple-value-bind (accuracy n-correct n-total)
	(test perceptron-learner a1a)
      (list accuracy n-correct n-total))
    '(82.61682 1326 1605)
    :test #'approximately-equal)

;; Test5,6 make and train averaged perceptron learner
(defvar averaged-perceptron-learner)

(is (progn
      (setf averaged-perceptron-learner (make-averaged-perceptron a1a-dim (length a1a)))
      (train averaged-perceptron-learner a1a)
      (cl-ol::averaged-weight-of averaged-perceptron-learner))
    #(-4.19501557632399d0 -1.2155763239875397d0 -0.07165109034267769d0
      2.4878504672897197d0 1.596884735202494d0 0.3364485981308407d0
      -1.0012461059190014d0 0.34953271028037414d0 2.317757009345794d0
      2.5146417445482854d0 -1.3538940809968851d0 0.0d0 0.0d0 -0.3277258566978196d0
      -0.6186915887850464d0 -0.724610591900312d0 2.056074766355141d0
      -1.7825545171339554d0 -1.0429906542056069d0 -0.2978193146417447d0
      1.9707165109034268d0 -0.44174454828660425d0 1.4485981308411215d0
      -2.2056074766355143d0 1.1551401869158875d0 -2.060436137071651d0
      0.17943925233644875d0 0.0d0 0.46230529595015624d0 -0.9937694704049844d0
      -0.9283489096573208d0 3.9395638629283494d0 -2.5825545171339566d0 0.0d0
      -4.414953271028038d0 -0.44174454828660425d0 -0.2978193146417447d0
      -1.0504672897196259d0 4.807476635514021d0 4.9383177570093455d0
      -3.123987538940809d0 -1.8529595015576326d0 -0.4641744548286605d0
      -1.0747663551401871d0 0.18006230529595013d0 0.0d0 2.730218068535825d0
      -0.3732087227414329d0 -2.292211838006231d0 0.615576323987539d0
      2.9968847352024923d0 1.646728971962617d0 1.029283489096573d0
      -1.3981308411214948d0 0.5538940809968846d0 0.34080996884735215d0
      -2.2897196261682256d0 -0.5383177570093458d0 0.14143302180685358d0 0.0d0
      3.0897196261682223d0 -2.0573208722741434d0 2.1476635514018674d0
      -2.4155763239875396d0 -1.7501557632398754d0 -0.41183800623052924d0
      0.5003115264797521d0 0.12336448598130867d0 -2.350778816199377d0
      -0.3258566978193146d0 0.6554517133956388d0 -0.9869158878504674d0
      -0.41059190031152515d0 -5.268535825545164d0 3.8710280373831774d0
      -3.0660436137071687d0 1.6685358255451717d0 -3.581308411214953d0
      0.31651090342679145d0 -1.7177570093457946d0 1.8679127725856692d0
      1.7171339563862928d0 -0.35202492211837877d0 0.36760124610591904d0
      -1.073520249221184d0 -0.7700934579439251d0 0.30841121495327106d0
      -1.614330218068536d0 0.0d0 -0.811214953271028d0 0.9800623052959502d0
      -0.2990654205607477d0 0.5445482866043614d0 -0.3744548286604361d0
      -0.5781931464174455d0 0.0d0 0.0d0 0.0d0 0.3806853582554518d0
      0.31090342679127736d0 0.0d0 0.0d0 -0.8143302180685358d0 0.0d0 0.0d0 0.0d0
      0.0d0 0.0d0 0.0d0 0.5595015576323987d0 0.0d0 0.0d0 -0.41495327102803736d0
      0.0d0 0.0d0 0.0d0 0.0d0 0.6255451713395639d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0)
    :test #'approximately-equal)

(is (cl-ol::averaged-bias-of averaged-perceptron-learner)
    -1.397507788161997d0
    :test #'approximately-equal)

;; Test7: test averaged perceptron learner
(is (multiple-value-bind (accuracy n-correct n-total)
	(test averaged-perceptron-learner a1a)
      (list accuracy n-correct n-total))
    '(84.17445 1351 1605)
    :test #'approximately-equal)

;; Test8,9 make and train SVM learner
(defvar svm-learner)

(is (progn
      (setf svm-learner (make-svm a1a-dim 0.01d0 0.01d0))
      (train svm-learner a1a)
      (cl-ol::weight-of svm-learner))
    #(-0.19848360343171728d0 -0.1942874571015032d0 -0.08319559237317246d0
      0.21945622660091935d0 0.0676384314724141d0 -0.10670913063592559d0
      -0.07713104666614899d0 0.054385476951626224d0 0.10815466875357883d0
      0.013941120261334804d0 -0.03041059423376173d0 0.0d0 0.0d0
      -0.03757185870050239d0 0.04064199054670929d0 -0.11999039197165463d0
      -0.03126758999267209d0 -0.04068414471493975d0 0.042300470091161856d0
      -0.0812585987517319d0 -0.05202655254157583d0 -0.19579149234824827d0
      0.13218265251593148d0 -0.0694127609394135d0 0.06912681577583141d0
      -0.05903481147111706d0 -0.0708010307994597d0 -0.00928479087815611d0
      0.13780187177125686d0 -0.015723610919664066d0 -0.06855101194036606d0
      0.13702480105939888d0 -0.076427995137305d0 -0.008995950319602222d0
      -0.3608457540072469d0 -0.19579149234824827d0 -0.0812585987517319d0
      -2.859451635819151d-4 0.44930979543774896d0 0.36080193553788137d0
      -0.19710413807412427d0 -0.2120351994870339d0 -0.021953286149811575d0
      -0.09264012075839029d0 -0.03380727569865068d0 0.00786608979706929d0
      0.027665153147524178d0 -0.11564383766242518d0 -0.15618057497770713d0
      -0.009468012460374183d0 0.3426385027203466d0 0.1886727250012483d0
      -0.015351632409793443d0 -0.08044839988546097d0 -0.0016474124869056861d0
      -0.06020010188023496d0 -0.14477997436359422d0 -0.00841291319613214d0
      -0.004613027115788105d0 0.0d0 0.12560800174954168d0 -0.14528915157780176d0
      0.25947001587362933d0 -0.26617293739367043d0 -0.030804170825549246d0
      -0.13168375265920945d0 0.038954933117084575d0 -0.01133280844896172d0
      -0.07470752546278503d0 -0.01692351047393924d0 -0.12486308356445829d0
      -0.19938720586060146d0 0.010515211027542049d0 -0.497677581693876d0
      0.30880558686081755d0 -0.3330650268667978d0 0.1441930320337382d0
      -0.2123556577719785d0 0.012306775463195255d0 -0.19378871946700946d0
      0.08240411519754516d0 0.12256149174518842d0 0.008459865467356312d0
      0.008886855646646694d0 -0.01689043222518053d0 -0.0358841426042214d0
      7.920254444808593d-5 0.0013860289453283753d0 0.0d0 0.0020547965550110838d0
      0.01710007161979005d0 0.009485646983509424d0 -0.014460364274801537d0
      -0.016793429957021544d0 -0.008051603539352453d0 0.0d0 0.0d0
      0.018242609867809376d0 0.009459407263734546d0 6.148951910884957d-4
      -0.007404997047392963d0 -0.007970621024018819d0 -0.06863547667208204d0
      0.009537013177903637d0 -0.008025011403887939d0 0.0d0 -0.015069739594221768d0
      0.0d0 0.0013236288283887498d0 -0.010890249493851882d0 0.0d0
      -0.0013014053751485856d0 -0.00875278356258395d0 -0.008000970045530652d0 0.0d0
      0.0d0 0.0d0 0.008180596014072151d0 -0.018065112698466522d0 0.0d0 0.0d0 0.0d0
      0.0d0)
    :test #'approximately-equal)

(is (cl-ol::bias-of svm-learner)
    -0.18887199483305964d0
    :test #'approximately-equal)

;; Test10: test SVM learner
(is (multiple-value-bind (accuracy n-correct n-total)
	(test svm-learner a1a)
      (list accuracy n-correct n-total))
    '(83.177574 1335 1605)
    :test #'approximately-equal)

;; Test11,12 make and train AROW learner
(defvar arow-learner)

(is (progn
      (setf arow-learner (make-arow a1a-dim 10d0))
      (train arow-learner a1a)
      (cl-ol::weight-of arow-learner))
    #(-0.3472641839017658d0 -0.1879349819875639d0 -0.01768230929708791d0
      0.19284410518873116d0 0.12533077009661814d0 -0.0045324527867627515d0
      -0.07609579633808693d0 0.05037746751415097d0 0.2688362531148612d0
      0.05440145795007773d0 -0.0939513498866131d0 0.0d0 0.0d0
      -0.08376992383622323d0 0.024250749181208484d0 -0.0322488465293406d0
      0.049467486688600126d0 -0.06306986412951884d0 -0.017889626625973626d0
      -0.07238278966930808d0 -0.06470924580376226d0 -0.09576343751522194d0
      0.2741002530917414d0 -0.19007240536949402d0 0.11056933415994241d0
      -0.22147872611062408d0 -0.09019839441631777d0 -0.051834728353543635d0
      0.08949906182696879d0 -0.061880731884717814d0 -0.1424709204599699d0
      0.4242230459090877d0 -0.3875785067759508d0 -0.05353048640859556d0
      -0.42551778224358655d0 -0.09576343751522194d0 -0.07238278966930808d0
      -0.036807287124172534d0 0.2604284932664368d0 0.2117749650314998d0
      -0.1838802446023311d0 -0.19820000463241466d0 -0.0701330604809405d0
      -0.2394966176253594d0 -0.14771053401631812d0 0.10207216535452314d0
      0.13000063740771872d0 -0.1266820631494674d0 -0.25528561788477827d0
      0.038254010275563216d0 0.3102342972503013d0 0.100716263441361d0
      0.009286747188551017d0 -0.07318174128984996d0 0.053712230556371345d0
      -0.03643431591696441d0 -0.16291018293626172d0 -0.10290681082924931d0
      -0.003657075332858065d0 0.0d0 0.34074466914965124d0 -0.24112883317355832d0
      0.1450053174035377d0 -0.1960743249950216d0 -0.18261026313100315d0
      -0.15257519300262506d0 -0.03745955068022975d0 0.08288670547667418d0
      -0.37527487917764335d0 -0.10658837330103772d0 -0.09224192800667409d0
      -0.17707954153824115d0 -0.01242384159230651d0 -0.1872331404928457d0
      0.3874271827038226d0 -0.09990474742553677d0 0.28850375884384916d0
      -0.3035079107836816d0 0.003776104094099295d0 -0.09065486881485749d0
      0.11135012702063656d0 0.07641866889467931d0 -0.02360891588406691d0
      0.09712814604266555d0 -0.1404698910597277d0 -0.24336085023824017d0
      0.01844345442758087d0 -0.10788526413129476d0 0.0d0 -0.12789137520465937d0
      0.28522149901396987d0 0.05075228626904073d0 0.05672150691818165d0
      -0.08600701307024794d0 -0.010927955400462208d0 0.0d0 0.0d0
      0.044990986681731654d0 0.17553558878372522d0 -0.01804378900116827d0
      -0.0193371461304593d0 -0.028064948381870323d0 -0.1239639587983506d0
      0.025167015556475356d0 -0.07651960702629759d0 -0.0018809225067752781d0
      -0.0632230433859301d0 0.0d0 -0.009442854811382045d0 -0.017911603536934287d0
      0.0d0 0.0029781893088766734d0 -0.07788005550719679d0 -0.07929624831761105d0
      0.0d0 0.0d0 -0.023263749059467584d0 0.105321438131757d0
      -0.14682343399467943d0 0.0d0 0.0d0 0.0d0 0.0d0)
    :test #'approximately-equal)

(is (cl-ol::bias-of arow-learner)
    -0.11614147964826764d0
    :test #'approximately-equal)

;; Test13: test AROW learner
(is (multiple-value-bind (accuracy n-correct n-total)
	(test arow-learner a1a)
      (list accuracy n-correct n-total))
    '(84.85981 1362 1605)
    :test #'approximately-equal)

;; Test14,15 make and train SCW-I learner
(defvar scw1-learner)

(is (progn
      (setf scw1-learner (make-scw1 a1a-dim 0.8d0 0.1d0))
      (train scw1-learner a1a)
      (cl-ol::weight-of scw1-learner))
    #(-0.9829515526145438d0 -0.6590559110808395d0 -0.031485795432892205d0
      0.5798362799393116d0 0.3883132324577028d0 0.030826982034104576d0
      -0.1532565265087772d0 0.05160487661013862d0 0.5059774671855873d0
      0.03747538667591779d0 -0.1798438991526059d0 0.0d0 0.0d0
      -0.22138200356888224d0 0.18058021817359982d0 -0.011840331283342463d0
      0.23205595072510118d0 -0.32549458189042263d0 0.043556532073773156d0
      -0.13809248136331428d0 -0.08209185947640141d0 -0.17845882335395516d0
      0.7403752391552173d0 -0.29155988990767395d0 0.29302453733676975d0
      -0.44037448187774697d0 -0.17839839552162987d0 0.0d0 0.2324867512963382d0
      -0.014559469325865937d0 -0.20716488962151713d0 0.862237386693042d0
      -0.5588806264996767d0 -0.1d0 -1.191861808861749d0 -0.17845882335395516d0
      -0.13809248136331428d0 0.024203414184450295d0 0.8100875713315829d0
      0.7040841147391699d0 -0.6068996120705719d0 -0.5790099707874687d0
      -0.0659482981444135d0 -0.5396214296442307d0 -0.279012466714606d0 0.1d0
      0.4194163276190793d0 -0.3976637511447063d0 -0.6351566729976674d0
      0.15493490529895187d0 0.7905661671412895d0 0.40501792837821643d0
      -0.022376289885159606d0 -0.20521793828922505d0 0.01578161629355638d0
      -0.25071981545649663d0 -0.48219849352769395d0 -0.1d0 -0.11868676041171602d0
      0.0d0 0.8973845157344376d0 -0.7563222727640924d0 0.43885329760924774d0
      -0.6381882444731852d0 -0.29312701458841905d0 -0.4083115088884943d0
      0.0323837025267383d0 -0.06669341019703946d0 -0.7790869680488656d0
      -0.1401557258993009d0 -0.1301223279910466d0 -0.3579718088415264d0
      -0.02432672643105152d0 -0.8521065818023299d0 0.8277243898933131d0
      -0.39147280370884224d0 0.6044187191297923d0 -0.7891529103311515d0
      0.05319477250390449d0 -0.19514173259918596d0 0.343551587903794d0
      0.20764245520700733d0 0.01080351064924152d0 0.1d0 -0.1945953942517594d0
      -0.37858489656747535d0 0.00596990930445869d0 -2.196197243354847d-4 0.0d0
      -0.10374484219815724d0 0.19700837963734938d0 0.1d0 -0.10275581499495318d0
      -0.1974382533140953d0 -0.0031015359753963495d0 0.0d0 0.0d0
      0.18163647477437153d0 0.08907829328357454d0 0.003323224323900517d0 0.0d0
      0.0d0 -0.35921664558291455d0 0.0d0 -0.1d0 0.0d0 -0.1d0 0.0d0
      -0.004009999408091602d0 -0.09096123283625236d0 0.0d0 0.1d0 -0.1d0 0.0d0 0.0d0
      0.0d0 0.0d0 0.1d0 -0.1d0 0.0d0 0.0d0 0.0d0 0.0d0)
    :test #'approximately-equal)

(is (cl-ol::bias-of scw1-learner)
    -0.4139374405086192d0
    :test #'approximately-equal)

;; Test16: test SCW-I learner
(is (multiple-value-bind (accuracy n-correct n-total)
	(test scw1-learner a1a)
      (list accuracy n-correct n-total))
    '(84.610596 1358 1605)
    :test #'approximately-equal)

;; Test17,18 make and train SCW-II learner
(defvar scw2-learner)

(is (progn
      (setf scw2-learner (make-scw2 a1a-dim 0.8d0 0.1d0))
      (train scw2-learner a1a)
      (cl-ol::weight-of scw2-learner))
    #(-0.6119180134222106d0 -0.2045523232473223d0 0.009326398941017435d0
      0.28566140482864094d0 0.21019406720289666d0 0.07254007225883052d0
      -0.0657439131095735d0 0.11691153451512001d0 0.46332363148080447d0
      0.06742155323712568d0 -0.2235520663958581d0 0.0d0 0.0d0 -0.2053096392235372d0
      0.04159157504127227d0 -0.08215915874848191d0 0.047403869818462514d0
      -0.026583364919607583d0 -0.2242566910926497d0 -0.08358087914084938d0
      0.04631779041328461d0 -0.09128398740733142d0 0.3859846364275493d0
      -0.3854093547060935d0 0.2251568482908695d0 -0.3618777273491807d0
      0.0799580967348448d0 -0.1266780350456564d0 -0.10749171353291934d0
      -0.09662860169652301d0 -0.08172757671941014d0 0.7463544990335308d0
      -0.7366089685241072d0 -0.04954957704216845d0 -0.8199425005425126d0
      -0.09128398740733142d0 -0.08358087914084938d0 -0.12758624554296563d0
      0.49807420072723035d0 0.5589765348627221d0 -0.010984421832534298d0
      -0.13052828753818674d0 -0.015911212028526793d0 -0.28584222859028674d0
      -0.15196840529627248d0 0.21602068135586705d0 0.1550765866688651d0
      -0.08338489543393639d0 -0.40944539112705786d0 0.10726754964645643d0
      0.4656229378236347d0 0.14115423248948086d0 -0.007593279402793293d0
      -0.15929047163272744d0 0.1939265351801137d0 0.03669705892043115d0
      -0.28963676310105924d0 -0.266800397246149d0 0.046785200813245414d0 0.0d0
      0.6298688268887055d0 -0.12107773881579943d0 0.29283846256777957d0
      -0.07808085459377614d0 -0.3825934858984251d0 0.021045770130726678d0
      -0.07759117498256105d0 0.27351383473344504d0 -0.8823208134180083d0
      -0.22644637501388332d0 -0.16830891617480043d0 -0.2329173057321376d0
      -0.0047546500071799684d0 -0.5313965747177607d0 0.29534753623636617d0
      -0.21292430639136015d0 0.4872363641750484d0 -0.5398122153500651d0
      -0.028284452687232186d0 -0.13562304389583307d0 0.19558351252884967d0
      0.12697540289506232d0 0.029555719619321377d0 0.19882133527113507d0
      -0.3510221705934886d0 -0.4728454769950851d0 0.07894726832621679d0
      -0.31989834772333375d0 0.0d0 -0.2754925349456747d0 0.7003200453522592d0
      0.07233717445622007d0 0.16385848066831096d0 -0.19096875431126298d0
      0.02974301505700161d0 0.0d0 0.0d0 0.0d0 0.45353407177927535d0
      -0.005240176221855103d0 -0.03415361473744377d0 -0.019335874444253998d0
      -0.15232376961698024d0 0.04785759602057093d0 -0.18078601427392987d0 0.0d0
      -0.10726090851199083d0 0.0d0 -0.038614258712911576d0 -0.07735342473419556d0
      0.0d0 -0.023947097706836798d0 -0.13155181519914805d0 -0.18035674534617752d0
      0.0d0 0.0d0 -0.06478330902974494d0 0.2470977967397556d0 -0.3045554304015999d0
      0.0d0 0.0d0 0.0d0 0.0d0)
    :test #'approximately-equal)

(is (cl-ol::bias-of scw2-learner)
    -0.31820098518563744d0
    :test #'approximately-equal)

;; Test19: test SCW-II learner
(is (multiple-value-bind (accuracy n-correct n-total)
	(test scw2-learner a1a)
      (list accuracy n-correct n-total))
    '(85.35825 1370 1605)
    :test #'approximately-equal)

(finalize)
