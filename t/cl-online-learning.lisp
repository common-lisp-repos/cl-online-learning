(in-package :cl-user)
(defpackage cl-online-learning.test
  (:use :cl
        :cl-online-learning
        :cl-online-learning.vector
	:cl-online-learning.utils
        :prove))
(in-package :cl-online-learning.test)

;; NOTE: To run this test file, execute `(asdf:test-system :cl-online-learning)' in your Lisp.

(defparameter a1a-dim 123)
(defvar a1a)

(plan nil)

(defun approximately-equal (x y &optional (delta 0.001d0))
  (flet ((andf (x y) (and x y))
         (close? (x y) (< (abs (- x y)) delta)))
    (etypecase x
      (double-float (close? x y))
      (vector (reduce #'andf (map 'vector #'close? x y)))
      (list (reduce #'andf (mapcar #'close? x y))))))

;;;;;;;;;;;;;;;; Dence, Binary ;;;;;;;;;;;;;;;;;
(format t ";;;;;;;;;;;;;;;; Dence, Binary ;;;;;;;;;;;;;;;;;~%")

;;; Read libsvm datasetn
(format t ";;; Read libsvm dataset~%")
(is (progn
      (setf a1a
	    (read-data (merge-pathnames
                        #P"t/dataset/a1a"
                        (asdf:system-source-directory :cl-online-learning-test))
                       a1a-dim))
      (car a1a))
    '(-1.0d0
      . #(0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 1.0d0 0.0d0
	  0.0d0 1.0d0 0.0d0 0.0d0 0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0
	  0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0
	  0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0
	  0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0
	  0.0d0 0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0
	  1.0d0 0.0d0 1.0d0 1.0d0 0.0d0 0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 1.0d0 0.0d0
	  0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0
	  0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0
	  0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0
	  0.0d0 0.0d0 0.0d0))
    :test #'equalp)

;;; Perceptron learner
(format t ";;; Perceptron learner~%")
(defvar perceptron-learner)

(is (progn
      (setf perceptron-learner (make-perceptron a1a-dim))
      (train perceptron-learner a1a)
      (clol::perceptron-weight perceptron-learner))
    #(-5.0d0 -2.0d0 -1.0d0 4.0d0 2.0d0 0.0d0 -1.0d0 1.0d0 5.0d0 2.0d0 -1.0d0 0.0d0
      0.0d0 1.0d0 0.0d0 -3.0d0 -3.0d0 3.0d0 -3.0d0 0.0d0 3.0d0 0.0d0 3.0d0 -3.0d0
      3.0d0 -4.0d0 0.0d0 0.0d0 0.0d0 -1.0d0 -1.0d0 5.0d0 -4.0d0 0.0d0 -7.0d0 0.0d0
      0.0d0 0.0d0 5.0d0 5.0d0 -2.0d0 -2.0d0 0.0d0 -2.0d0 -1.0d0 0.0d0 2.0d0 1.0d0
      -3.0d0 0.0d0 6.0d0 3.0d0 1.0d0 -2.0d0 4.0d0 0.0d0 -5.0d0 -1.0d0 0.0d0 0.0d0
      3.0d0 -1.0d0 3.0d0 -1.0d0 -3.0d0 -3.0d0 2.0d0 0.0d0 -4.0d0 -1.0d0 1.0d0
      -2.0d0 0.0d0 -6.0d0 4.0d0 -5.0d0 3.0d0 -5.0d0 -2.0d0 -2.0d0 4.0d0 3.0d0 2.0d0
      1.0d0 -2.0d0 -2.0d0 0.0d0 -2.0d0 0.0d0 -1.0d0 2.0d0 -1.0d0 1.0d0 -1.0d0
      -1.0d0 0.0d0 0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 0.0d0 -2.0d0 0.0d0 0.0d0 0.0d0
      0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 -1.0d0 0.0d0 0.0d0 0.0d0 0.0d0 1.0d0
      0.0d0 0.0d0 0.0d0 0.0d0 0.0d0)
    :test #'approximately-equal)

(is (clol::perceptron-bias perceptron-learner) -2.0d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test perceptron-learner a1a)
      (list accuracy n-correct n-total))
    '(82.61682 1326 1605)
    :test #'approximately-equal)

;;; AROW learner
(format t ";;; AROW learner~%")
(defvar arow-learner)

(is (progn
      (setf arow-learner (make-arow a1a-dim 10d0))
      (train arow-learner a1a)
      (clol::arow-weight arow-learner))
    #(-0.3472641839017658d0 -0.1879349819875639d0 -0.01768230929708791d0
      0.19284410518873116d0 0.12533077009661814d0 -0.0045324527867627515d0
      -0.07609579633808693d0 0.05037746751415097d0 0.2688362531148612d0
      0.05440145795007773d0 -0.0939513498866131d0 0.0d0 0.0d0
      -0.08376992383622323d0 0.024250749181208484d0 -0.0322488465293406d0
      0.049467486688600126d0 -0.06306986412951884d0 -0.017889626625973626d0
      -0.07238278966930808d0 -0.06470924580376226d0 -0.09576343751522194d0
      0.2741002530917414d0 -0.19007240536949402d0 0.11056933415994241d0
      -0.22147872611062408d0 -0.09019839441631777d0 -0.051834728353543635d0
      0.08949906182696879d0 -0.061880731884717814d0 -0.1424709204599699d0
      0.4242230459090877d0 -0.3875785067759508d0 -0.05353048640859556d0
      -0.42551778224358655d0 -0.09576343751522194d0 -0.07238278966930808d0
      -0.036807287124172534d0 0.2604284932664368d0 0.2117749650314998d0
      -0.1838802446023311d0 -0.19820000463241466d0 -0.0701330604809405d0
      -0.2394966176253594d0 -0.14771053401631812d0 0.10207216535452314d0
      0.13000063740771872d0 -0.1266820631494674d0 -0.25528561788477827d0
      0.038254010275563216d0 0.3102342972503013d0 0.100716263441361d0
      0.009286747188551017d0 -0.07318174128984996d0 0.053712230556371345d0
      -0.03643431591696441d0 -0.16291018293626172d0 -0.10290681082924931d0
      -0.003657075332858065d0 0.0d0 0.34074466914965124d0 -0.24112883317355832d0
      0.1450053174035377d0 -0.1960743249950216d0 -0.18261026313100315d0
      -0.15257519300262506d0 -0.03745955068022975d0 0.08288670547667418d0
      -0.37527487917764335d0 -0.10658837330103772d0 -0.09224192800667409d0
      -0.17707954153824115d0 -0.01242384159230651d0 -0.1872331404928457d0
      0.3874271827038226d0 -0.09990474742553677d0 0.28850375884384916d0
      -0.3035079107836816d0 0.003776104094099295d0 -0.09065486881485749d0
      0.11135012702063656d0 0.07641866889467931d0 -0.02360891588406691d0
      0.09712814604266555d0 -0.1404698910597277d0 -0.24336085023824017d0
      0.01844345442758087d0 -0.10788526413129476d0 0.0d0 -0.12789137520465937d0
      0.28522149901396987d0 0.05075228626904073d0 0.05672150691818165d0
      -0.08600701307024794d0 -0.010927955400462208d0 0.0d0 0.0d0
      0.044990986681731654d0 0.17553558878372522d0 -0.01804378900116827d0
      -0.0193371461304593d0 -0.028064948381870323d0 -0.1239639587983506d0
      0.025167015556475356d0 -0.07651960702629759d0 -0.0018809225067752781d0
      -0.0632230433859301d0 0.0d0 -0.009442854811382045d0 -0.017911603536934287d0
      0.0d0 0.0029781893088766734d0 -0.07788005550719679d0 -0.07929624831761105d0
      0.0d0 0.0d0 -0.023263749059467584d0 0.105321438131757d0
      -0.14682343399467943d0 0.0d0 0.0d0 0.0d0 0.0d0)
    :test #'approximately-equal)

(is (clol::arow-bias arow-learner)
    -0.11614147964826764d0
    :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test arow-learner a1a)
      (list accuracy n-correct n-total))
    '(84.85981 1362 1605)
    :test #'approximately-equal)

;;; SCW-I learner
(format t ";;; SCW-I learner~%")
(defvar scw-learner)

(is (progn
      (setf scw-learner (make-scw a1a-dim 0.8d0 0.1d0))
      (train scw-learner a1a)
      (clol::scw-weight scw-learner))
    #(-0.9829515526145438d0 -0.6590559110808395d0 -0.031485795432892205d0
      0.5798362799393116d0 0.3883132324577028d0 0.030826982034104576d0
      -0.1532565265087772d0 0.05160487661013862d0 0.5059774671855873d0
      0.03747538667591779d0 -0.1798438991526059d0 0.0d0 0.0d0
      -0.22138200356888224d0 0.18058021817359982d0 -0.011840331283342463d0
      0.23205595072510118d0 -0.32549458189042263d0 0.043556532073773156d0
      -0.13809248136331428d0 -0.08209185947640141d0 -0.17845882335395516d0
      0.7403752391552173d0 -0.29155988990767395d0 0.29302453733676975d0
      -0.44037448187774697d0 -0.17839839552162987d0 0.0d0 0.2324867512963382d0
      -0.014559469325865937d0 -0.20716488962151713d0 0.862237386693042d0
      -0.5588806264996767d0 -0.1d0 -1.191861808861749d0 -0.17845882335395516d0
      -0.13809248136331428d0 0.024203414184450295d0 0.8100875713315829d0
      0.7040841147391699d0 -0.6068996120705719d0 -0.5790099707874687d0
      -0.0659482981444135d0 -0.5396214296442307d0 -0.279012466714606d0 0.1d0
      0.4194163276190793d0 -0.3976637511447063d0 -0.6351566729976674d0
      0.15493490529895187d0 0.7905661671412895d0 0.40501792837821643d0
      -0.022376289885159606d0 -0.20521793828922505d0 0.01578161629355638d0
      -0.25071981545649663d0 -0.48219849352769395d0 -0.1d0 -0.11868676041171602d0
      0.0d0 0.8973845157344376d0 -0.7563222727640924d0 0.43885329760924774d0
      -0.6381882444731852d0 -0.29312701458841905d0 -0.4083115088884943d0
      0.0323837025267383d0 -0.06669341019703946d0 -0.7790869680488656d0
      -0.1401557258993009d0 -0.1301223279910466d0 -0.3579718088415264d0
      -0.02432672643105152d0 -0.8521065818023299d0 0.8277243898933131d0
      -0.39147280370884224d0 0.6044187191297923d0 -0.7891529103311515d0
      0.05319477250390449d0 -0.19514173259918596d0 0.343551587903794d0
      0.20764245520700733d0 0.01080351064924152d0 0.1d0 -0.1945953942517594d0
      -0.37858489656747535d0 0.00596990930445869d0 -2.196197243354847d-4 0.0d0
      -0.10374484219815724d0 0.19700837963734938d0 0.1d0 -0.10275581499495318d0
      -0.1974382533140953d0 -0.0031015359753963495d0 0.0d0 0.0d0
      0.18163647477437153d0 0.08907829328357454d0 0.003323224323900517d0 0.0d0
      0.0d0 -0.35921664558291455d0 0.0d0 -0.1d0 0.0d0 -0.1d0 0.0d0
      -0.004009999408091602d0 -0.09096123283625236d0 0.0d0 0.1d0 -0.1d0 0.0d0 0.0d0
      0.0d0 0.0d0 0.1d0 -0.1d0 0.0d0 0.0d0 0.0d0 0.0d0)
    :test #'approximately-equal)

(is (clol::scw-bias scw-learner)
    -0.4139374405086192d0
    :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test scw-learner a1a)
      (list accuracy n-correct n-total))
    '(84.610596 1358 1605)
    :test #'approximately-equal)

;;; Logistic Regression (SGD)
(format t ";;; Logistic Regression (SGD)~%")
(defvar lr+sgd-learner)

(is (progn
      (setf lr+sgd-learner (make-lr+sgd a1a-dim 0.00001d0 0.01d0))
      (train lr+sgd-learner a1a)
      (clol::lr+sgd-weight lr+sgd-learner))
    #(-0.36881621064588094d0 -0.2109454466763342d0 0.016270302970254585d0
      0.2236867740245935d0 0.0930982322778365d0 -0.23601507864401866d0
      -0.0348626343142817d0 0.06439153155771717d0 0.07224041888619455d0
      0.03625055652741897d0 -0.02030958509205901d0 0.0d0 -0.001349107664328575d0
      -0.07037046246806451d0 0.00599586226872607d0 -0.06235239651753239d0
      -0.01858070844600174d0 -0.10139864288665797d0 0.15158608254633785d0
      -0.14325727798678298d0 -0.06669865766805069d0 -0.20886896794410412d0
      0.07952545997541714d0 -0.042822416464826214d0 0.048458672685419514d0
      -0.054841135081041874d0 -0.05168370951368017d0 -0.017472101168014988d0
      0.11370200917939727d0 -0.01760956386856953d0 -0.0566093104254412d0
      0.09448320268783302d0 -0.06511476575148469d0 -0.009483869251938734d0
      -0.33951311272822204d0 -0.20886896794410412d0 -0.14325727798678298d0
      0.005636256220593346d0 0.4392967543889846d0 0.5586136516444125d0
      -0.1856973016796527d0 -0.4908949814587519d0 -0.03700569727463587d0
      -0.06808840197714093d0 -0.02924061984270779d0 0.005607002538947162d0
      0.0343118070860204d0 -0.1061470624710557d0 -0.19145728289752112d0
      -0.02793792780795849d0 0.3183204005194685d0 0.1521039134911977d0
      -0.0435382927722097d0 -0.0600373853463339d0 -0.05692257408780274d0
      -0.044925520131624624d0 -0.07017263609642849d0 -0.012001131948685496d0
      -0.00990109861609472d0 0.0d0 0.1573458207043665d0 -0.2681505983398473d0
      0.42661738492662493d0 -0.32418306235199246d0 -0.08381425443527574d0
      -0.15452163855340792d0 -0.0586179760689122d0 -0.013798340934802339d0
      -0.057713840801657694d0 -0.009040412625050473d0 -0.10753577761910862d0
      -0.2728516704455447d0 0.026145322396013783d0 -0.5224951778676266d0
      0.2757888298180947d0 -0.34409585073282073d0 0.09738950268329043d0
      -0.26049568835939907d0 -0.016536440549221623d0 -0.1737567171207471d0
      0.045008817448182095d0 0.15907368053165505d0 -0.10197318110367193d0
      0.0031913571736071145d0 -0.010020110867023842d0 -0.01944864775369861d0
      -0.0015532675213777096d0 9.459524125510271d-4 0.0d0 -0.00537386868203403d0
      0.016046112111028528d0 0.002887084636550959d0 -0.0032298519891403475d0
      -0.00634924645445382d0 -0.002270439109307006d0 0.0d0 -8.996515459814866d-4
      0.00787000746030618d0 0.013769827321745733d0 -0.008399246336239613d0
      -0.0045356958500349966d0 -0.005148052711243364d0 -0.05857116865618538d0
      0.0034863277703288766d0 -0.0037686659890623594d0 -0.0010810836438453553d0
      -0.00856467247477334d0 -4.288628700049655d-4 7.540948477187569d-4
      -1.832974669318892d-5 0.0d0 6.843995139695201d-4 -0.005146256792589131d0
      -0.010830981730421676d0 -7.994785185899475d-4 0.0d0 -0.0019503444707653175d0
      0.007022525852400634d0 -0.016066838767427184d0 0.0d0 0.0d0 0.0d0 0.0d0)
    :test #'approximately-equal)

(is (clol::lr+sgd-bias lr+sgd-learner)
    -0.24670634804953057d0
    :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test lr+sgd-learner a1a)
      (list accuracy n-correct n-total))
    '(82.61682 1326 1605)
    :test #'approximately-equal)

;;; Logistic Regression (ADAM)
(format t ";;; Logistic Regression (ADAM)~%")
(defvar lr+adam-learner)

(is (progn
      (setf lr+adam-learner (make-lr+adam a1a-dim 0.000001d0 0.001d0 1.d-8 0.9d0 0.99d0))
      (train lr+adam-learner a1a)
      (clol::lr+adam-weight lr+adam-learner))
    #(-0.48907681447856016d0 -0.18050687671515786d0 -0.014161012844221556d0
      0.11360342407468896d0 0.04946066410774223d0 -0.13983957480059395d0
      -0.02320145747495363d0 0.06639069337654223d0 0.06253394072991883d0
      0.024222607306911587d0 -0.027367566602044254d0 0.0d0 -0.01044822638428894d0
      -0.05601824787784897d0 -0.019226417565802664d0 -0.06232108256738559d0
      -0.04115410798274551d0 -0.09485181264656574d0 0.10142847086945721d0
      -0.1466374436009795d0 -0.1491662871843062d0 -0.16829268711269735d0
      0.09995793175865524d0 -0.07946577136326531d0 0.02734982211338315d0
      -0.1378582260335471d0 -0.14670921504454823d0 -0.0881435047397066d0
      0.10917128855226148d0 -0.05644814485327269d0 -0.1434249688558034d0
      0.11380375393060943d0 -0.15318930922876456d0 -0.044151983336675686d0
      -0.34870557687598885d0 -0.16829268711269735d0 -0.1466374436009795d0
      -0.018791984708947634d0 0.22056052261004677d0 0.22335897426518092d0
      -0.2607789294947696d0 -0.4664595920840015d0 -0.12180249629317684d0
      -0.19215948583755024d0 -0.10522095728881921d0 0.0010170447344466477d0
      -0.009000800592536167d0 -0.09875066133137891d0 -0.3220371148345146d0
      -0.052699127737915324d0 0.19866225571534438d0 0.09891677565112698d0
      -0.11473291424347934d0 -0.11030193085261719d0 -0.09509080676285352d0
      -0.07310502620368269d0 -0.10203579932658502d0 -0.06055926530342877d0
      -0.04763098337553357d0 0.0d0 0.11875853472338706d0 -0.43056476304290436d0
      0.19649544524338208d0 -0.3171348053676226d0 -0.24464063209385045d0
      -0.2678519891453484d0 -0.05136453458549955d0 -0.05740290389761139d0
      -0.1443723763841522d0 -0.04310262695138283d0 -0.14407312915069334d0
      -0.2537762422445041d0 0.013314108253626321d0 -0.2064635786557003d0
      0.21090720268344784d0 -0.13794812179323712d0 0.08180150330710746d0
      -0.26658054310351664d0 -0.06083006948537366d0 -0.10912011027142135d0
      0.014130277565334224d0 0.09050726713651203d0 -0.0695463659288662d0
      -0.010150181435273008d0 -0.033789530431050256d0 -0.07152540781994178d0
      -0.016378799266989246d0 -0.008247583866457126d0 0.0d0 -0.011465892892965707d0
      0.020801654476260065d0 -6.524200701080515d-5 -0.021063113126076696d0
      -0.020865118917193403d0 -0.018140311873895018d0 0.0d0 -0.010462223952850437d0
      0.009200104855950637d0 0.012759113605810305d0 -0.03009144074930959d0
      -0.019086631968453036d0 -0.03048238691875727d0 -0.13885589686478697d0
      0.01047473024758489d0 -0.010413797486794774d0 -0.010473885058452311d0
      -0.02381497273318185d0 -0.010472110960605902d0 -3.101267084657952d-7
      -0.018090170066433802d0 0.0d0 -0.004680877733711436d0 -0.01047178780163071d0
      -0.04864277351043214d0 -0.010468781799816512d0 0.0d0 -0.01855291347487044d0
      0.010454803973065837d0 -0.06692309044948563d0 0.0d0 0.0d0 0.0d0 0.0d0)
    :test #'approximately-equal)

(is (clol::lr+adam-bias lr+adam-learner)
    -0.10311418846510162d0
    :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test lr+adam-learner a1a)
      (list accuracy n-correct n-total))
    '(82.24299 1320 1605)
    :test #'approximately-equal)

;;;;;;;;;;;;;;;; Sparse, Binary ;;;;;;;;;;;;;;;;;
(format t ";;;;;;;;;;;;;;;; Sparse, Binary ;;;;;;;;;;;;;;;;;~%")

(defvar a1a.sp)

;;; Read libsvm dataset (Sparse)
(format t ";;; Read libsvm dataset (Sparse)~%")
(is (progn
      (setf a1a.sp
	    (read-data (merge-pathnames
                        #P"t/dataset/a1a"
                        (asdf:system-source-directory :cl-online-learning-test))
                       a1a-dim :sparse-p t))
      (list (caar a1a.sp)
            (sparse-vector-index-vector (cdar a1a.sp))
            (sparse-vector-value-vector (cdar a1a.sp))))
    '(-1.0d0
      #(2 10 13 18 38 41 54 63 66 72 74 75 79 82)
      #(1.0d0 1.0d0 1.0d0 1.0d0 1.0d0 1.0d0 1.0d0 1.0d0 1.0d0 1.0d0 1.0d0 1.0d0 1.0d0 1.0d0))
    :test #'equalp)

;;; Sparse-perceptron learner
(format t ";;; Sparse-perceptron learner~%")
(defvar sparse-perceptron-learner)

(is (progn
      (setf sparse-perceptron-learner (make-sparse-perceptron a1a-dim))
      (train sparse-perceptron-learner a1a.sp)
      (clol::sparse-perceptron-weight sparse-perceptron-learner))
    #(-5.0d0 -2.0d0 -1.0d0 4.0d0 2.0d0 0.0d0 -1.0d0 1.0d0 5.0d0 2.0d0 -1.0d0 0.0d0
      0.0d0 1.0d0 0.0d0 -3.0d0 -3.0d0 3.0d0 -3.0d0 0.0d0 3.0d0 0.0d0 3.0d0 -3.0d0
      3.0d0 -4.0d0 0.0d0 0.0d0 0.0d0 -1.0d0 -1.0d0 5.0d0 -4.0d0 0.0d0 -7.0d0 0.0d0
      0.0d0 0.0d0 5.0d0 5.0d0 -2.0d0 -2.0d0 0.0d0 -2.0d0 -1.0d0 0.0d0 2.0d0 1.0d0
      -3.0d0 0.0d0 6.0d0 3.0d0 1.0d0 -2.0d0 4.0d0 0.0d0 -5.0d0 -1.0d0 0.0d0 0.0d0
      3.0d0 -1.0d0 3.0d0 -1.0d0 -3.0d0 -3.0d0 2.0d0 0.0d0 -4.0d0 -1.0d0 1.0d0
      -2.0d0 0.0d0 -6.0d0 4.0d0 -5.0d0 3.0d0 -5.0d0 -2.0d0 -2.0d0 4.0d0 3.0d0 2.0d0
      1.0d0 -2.0d0 -2.0d0 0.0d0 -2.0d0 0.0d0 -1.0d0 2.0d0 -1.0d0 1.0d0 -1.0d0
      -1.0d0 0.0d0 0.0d0 0.0d0 1.0d0 0.0d0 0.0d0 0.0d0 -2.0d0 0.0d0 0.0d0 0.0d0
      0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 0.0d0 -1.0d0 0.0d0 0.0d0 0.0d0 0.0d0 1.0d0
      0.0d0 0.0d0 0.0d0 0.0d0 0.0d0)
    :test #'approximately-equal)

(is (clol::sparse-perceptron-bias sparse-perceptron-learner) -2.0d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test sparse-perceptron-learner a1a.sp)
      (list accuracy n-correct n-total))
    '(82.61682 1326 1605)
    :test #'approximately-equal)

;;; Sparse AROW learner
(format t ";;; Sparse AROW learner~%")
(defvar sparse-arow-learner)

(is (progn
      (setf sparse-arow-learner (make-sparse-arow a1a-dim 10d0))
      (train sparse-arow-learner a1a.sp)
      (clol::sparse-arow-weight sparse-arow-learner))
    #(-0.3472641839017658d0 -0.1879349819875639d0 -0.01768230929708791d0
      0.19284410518873116d0 0.12533077009661814d0 -0.0045324527867627515d0
      -0.07609579633808693d0 0.05037746751415097d0 0.2688362531148612d0
      0.05440145795007773d0 -0.0939513498866131d0 0.0d0 0.0d0
      -0.08376992383622323d0 0.024250749181208484d0 -0.0322488465293406d0
      0.049467486688600126d0 -0.06306986412951884d0 -0.017889626625973626d0
      -0.07238278966930808d0 -0.06470924580376226d0 -0.09576343751522194d0
      0.2741002530917414d0 -0.19007240536949402d0 0.11056933415994241d0
      -0.22147872611062408d0 -0.09019839441631777d0 -0.051834728353543635d0
      0.08949906182696879d0 -0.061880731884717814d0 -0.1424709204599699d0
      0.4242230459090877d0 -0.3875785067759508d0 -0.05353048640859556d0
      -0.42551778224358655d0 -0.09576343751522194d0 -0.07238278966930808d0
      -0.036807287124172534d0 0.2604284932664368d0 0.2117749650314998d0
      -0.1838802446023311d0 -0.19820000463241466d0 -0.0701330604809405d0
      -0.2394966176253594d0 -0.14771053401631812d0 0.10207216535452314d0
      0.13000063740771872d0 -0.1266820631494674d0 -0.25528561788477827d0
      0.038254010275563216d0 0.3102342972503013d0 0.100716263441361d0
      0.009286747188551017d0 -0.07318174128984996d0 0.053712230556371345d0
      -0.03643431591696441d0 -0.16291018293626172d0 -0.10290681082924931d0
      -0.003657075332858065d0 0.0d0 0.34074466914965124d0 -0.24112883317355832d0
      0.1450053174035377d0 -0.1960743249950216d0 -0.18261026313100315d0
      -0.15257519300262506d0 -0.03745955068022975d0 0.08288670547667418d0
      -0.37527487917764335d0 -0.10658837330103772d0 -0.09224192800667409d0
      -0.17707954153824115d0 -0.01242384159230651d0 -0.1872331404928457d0
      0.3874271827038226d0 -0.09990474742553677d0 0.28850375884384916d0
      -0.3035079107836816d0 0.003776104094099295d0 -0.09065486881485749d0
      0.11135012702063656d0 0.07641866889467931d0 -0.02360891588406691d0
      0.09712814604266555d0 -0.1404698910597277d0 -0.24336085023824017d0
      0.01844345442758087d0 -0.10788526413129476d0 0.0d0 -0.12789137520465937d0
      0.28522149901396987d0 0.05075228626904073d0 0.05672150691818165d0
      -0.08600701307024794d0 -0.010927955400462208d0 0.0d0 0.0d0
      0.044990986681731654d0 0.17553558878372522d0 -0.01804378900116827d0
      -0.0193371461304593d0 -0.028064948381870323d0 -0.1239639587983506d0
      0.025167015556475356d0 -0.07651960702629759d0 -0.0018809225067752781d0
      -0.0632230433859301d0 0.0d0 -0.009442854811382045d0 -0.017911603536934287d0
      0.0d0 0.0029781893088766734d0 -0.07788005550719679d0 -0.07929624831761105d0
      0.0d0 0.0d0 -0.023263749059467584d0 0.105321438131757d0
      -0.14682343399467943d0 0.0d0 0.0d0 0.0d0 0.0d0)
    :test #'approximately-equal)

(is (clol::sparse-arow-bias sparse-arow-learner)
    -0.11614147964826764d0
    :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test sparse-arow-learner a1a.sp)
      (list accuracy n-correct n-total))
    '(84.85981 1362 1605)
    :test #'approximately-equal)

;;; Sparse SCW-I learner
(format t ";;; Sparse SCW-I learner~%")
(defvar sparse-scw-learner)

(is (progn
      (setf sparse-scw-learner (make-sparse-scw a1a-dim 0.8d0 0.1d0))
      (train sparse-scw-learner a1a.sp)
      (clol::sparse-scw-weight sparse-scw-learner))
    #(-0.9829515526145438d0 -0.6590559110808395d0 -0.031485795432892205d0
      0.5798362799393116d0 0.3883132324577028d0 0.030826982034104576d0
      -0.1532565265087772d0 0.05160487661013862d0 0.5059774671855873d0
      0.03747538667591779d0 -0.1798438991526059d0 0.0d0 0.0d0
      -0.22138200356888224d0 0.18058021817359982d0 -0.011840331283342463d0
      0.23205595072510118d0 -0.32549458189042263d0 0.043556532073773156d0
      -0.13809248136331428d0 -0.08209185947640141d0 -0.17845882335395516d0
      0.7403752391552173d0 -0.29155988990767395d0 0.29302453733676975d0
      -0.44037448187774697d0 -0.17839839552162987d0 0.0d0 0.2324867512963382d0
      -0.014559469325865937d0 -0.20716488962151713d0 0.862237386693042d0
      -0.5588806264996767d0 -0.1d0 -1.191861808861749d0 -0.17845882335395516d0
      -0.13809248136331428d0 0.024203414184450295d0 0.8100875713315829d0
      0.7040841147391699d0 -0.6068996120705719d0 -0.5790099707874687d0
      -0.0659482981444135d0 -0.5396214296442307d0 -0.279012466714606d0 0.1d0
      0.4194163276190793d0 -0.3976637511447063d0 -0.6351566729976674d0
      0.15493490529895187d0 0.7905661671412895d0 0.40501792837821643d0
      -0.022376289885159606d0 -0.20521793828922505d0 0.01578161629355638d0
      -0.25071981545649663d0 -0.48219849352769395d0 -0.1d0 -0.11868676041171602d0
      0.0d0 0.8973845157344376d0 -0.7563222727640924d0 0.43885329760924774d0
      -0.6381882444731852d0 -0.29312701458841905d0 -0.4083115088884943d0
      0.0323837025267383d0 -0.06669341019703946d0 -0.7790869680488656d0
      -0.1401557258993009d0 -0.1301223279910466d0 -0.3579718088415264d0
      -0.02432672643105152d0 -0.8521065818023299d0 0.8277243898933131d0
      -0.39147280370884224d0 0.6044187191297923d0 -0.7891529103311515d0
      0.05319477250390449d0 -0.19514173259918596d0 0.343551587903794d0
      0.20764245520700733d0 0.01080351064924152d0 0.1d0 -0.1945953942517594d0
      -0.37858489656747535d0 0.00596990930445869d0 -2.196197243354847d-4 0.0d0
      -0.10374484219815724d0 0.19700837963734938d0 0.1d0 -0.10275581499495318d0
      -0.1974382533140953d0 -0.0031015359753963495d0 0.0d0 0.0d0
      0.18163647477437153d0 0.08907829328357454d0 0.003323224323900517d0 0.0d0
      0.0d0 -0.35921664558291455d0 0.0d0 -0.1d0 0.0d0 -0.1d0 0.0d0
      -0.004009999408091602d0 -0.09096123283625236d0 0.0d0 0.1d0 -0.1d0 0.0d0 0.0d0
      0.0d0 0.0d0 0.1d0 -0.1d0 0.0d0 0.0d0 0.0d0 0.0d0)
    :test #'approximately-equal)

(is (clol::sparse-scw-bias sparse-scw-learner)
    -0.4139374405086192d0
    :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test sparse-scw-learner a1a.sp)
      (list accuracy n-correct n-total))
    '(84.610596 1358 1605)
    :test #'approximately-equal)

;;; Sparse Logistic Regression (SGD)
(format t ";;; Sparse Logistic Regression (SGD)~%")
(defvar sparse-lr+sgd-learner)

(is (progn
      (setf sparse-lr+sgd-learner (make-sparse-lr+sgd a1a-dim 0.00001d0 0.01d0))
      (train sparse-lr+sgd-learner a1a.sp)
      (clol::sparse-lr+sgd-weight sparse-lr+sgd-learner))
    #(-0.36881621064588094d0 -0.2109454466763342d0 0.016270302970254585d0
      0.2236867740245935d0 0.0930982322778365d0 -0.23601507864401866d0
      -0.0348626343142817d0 0.06439153155771717d0 0.07224041888619455d0
      0.03625055652741897d0 -0.02030958509205901d0 0.0d0 -0.001349107664328575d0
      -0.07037046246806451d0 0.00599586226872607d0 -0.06235239651753239d0
      -0.01858070844600174d0 -0.10139864288665797d0 0.15158608254633785d0
      -0.14325727798678298d0 -0.06669865766805069d0 -0.20886896794410412d0
      0.07952545997541714d0 -0.042822416464826214d0 0.048458672685419514d0
      -0.054841135081041874d0 -0.05168370951368017d0 -0.017472101168014988d0
      0.11370200917939727d0 -0.01760956386856953d0 -0.0566093104254412d0
      0.09448320268783302d0 -0.06511476575148469d0 -0.009483869251938734d0
      -0.33951311272822204d0 -0.20886896794410412d0 -0.14325727798678298d0
      0.005636256220593346d0 0.4392967543889846d0 0.5586136516444125d0
      -0.1856973016796527d0 -0.4908949814587519d0 -0.03700569727463587d0
      -0.06808840197714093d0 -0.02924061984270779d0 0.005607002538947162d0
      0.0343118070860204d0 -0.1061470624710557d0 -0.19145728289752112d0
      -0.02793792780795849d0 0.3183204005194685d0 0.1521039134911977d0
      -0.0435382927722097d0 -0.0600373853463339d0 -0.05692257408780274d0
      -0.044925520131624624d0 -0.07017263609642849d0 -0.012001131948685496d0
      -0.00990109861609472d0 0.0d0 0.1573458207043665d0 -0.2681505983398473d0
      0.42661738492662493d0 -0.32418306235199246d0 -0.08381425443527574d0
      -0.15452163855340792d0 -0.0586179760689122d0 -0.013798340934802339d0
      -0.057713840801657694d0 -0.009040412625050473d0 -0.10753577761910862d0
      -0.2728516704455447d0 0.026145322396013783d0 -0.5224951778676266d0
      0.2757888298180947d0 -0.34409585073282073d0 0.09738950268329043d0
      -0.26049568835939907d0 -0.016536440549221623d0 -0.1737567171207471d0
      0.045008817448182095d0 0.15907368053165505d0 -0.10197318110367193d0
      0.0031913571736071145d0 -0.010020110867023842d0 -0.01944864775369861d0
      -0.0015532675213777096d0 9.459524125510271d-4 0.0d0 -0.00537386868203403d0
      0.016046112111028528d0 0.002887084636550959d0 -0.0032298519891403475d0
      -0.00634924645445382d0 -0.002270439109307006d0 0.0d0 -8.996515459814866d-4
      0.00787000746030618d0 0.013769827321745733d0 -0.008399246336239613d0
      -0.0045356958500349966d0 -0.005148052711243364d0 -0.05857116865618538d0
      0.0034863277703288766d0 -0.0037686659890623594d0 -0.0010810836438453553d0
      -0.00856467247477334d0 -4.288628700049655d-4 7.540948477187569d-4
      -1.832974669318892d-5 0.0d0 6.843995139695201d-4 -0.005146256792589131d0
      -0.010830981730421676d0 -7.994785185899475d-4 0.0d0 -0.0019503444707653175d0
      0.007022525852400634d0 -0.016066838767427184d0 0.0d0 0.0d0 0.0d0 0.0d0)
    :test #'approximately-equal)

(is (clol::sparse-lr+sgd-bias sparse-lr+sgd-learner)
    -0.24670634804953057d0
    :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test sparse-lr+sgd-learner a1a.sp)
      (list accuracy n-correct n-total))
    '(82.61682 1326 1605)
    :test #'approximately-equal)

;;; Sparse Logistic Regression (ADAM)
(format t ";;; Sparse Logistic Regression (ADAM)~%")
(defvar sparse-lr+adam-learner)

(is (progn
      (setf sparse-lr+adam-learner (make-sparse-lr+adam a1a-dim 0.000001d0 0.001d0 1.d-8 0.9d0 0.99d0))
      (train sparse-lr+adam-learner a1a.sp)
      (clol::sparse-lr+adam-weight sparse-lr+adam-learner))
    #(-0.48907681447856016d0 -0.18050687671515786d0 -0.014161012844221556d0
      0.11360342407468896d0 0.04946066410774223d0 -0.13983957480059395d0
      -0.02320145747495363d0 0.06639069337654223d0 0.06253394072991883d0
      0.024222607306911587d0 -0.027367566602044254d0 0.0d0 -0.01044822638428894d0
      -0.05601824787784897d0 -0.019226417565802664d0 -0.06232108256738559d0
      -0.04115410798274551d0 -0.09485181264656574d0 0.10142847086945721d0
      -0.1466374436009795d0 -0.1491662871843062d0 -0.16829268711269735d0
      0.09995793175865524d0 -0.07946577136326531d0 0.02734982211338315d0
      -0.1378582260335471d0 -0.14670921504454823d0 -0.0881435047397066d0
      0.10917128855226148d0 -0.05644814485327269d0 -0.1434249688558034d0
      0.11380375393060943d0 -0.15318930922876456d0 -0.044151983336675686d0
      -0.34870557687598885d0 -0.16829268711269735d0 -0.1466374436009795d0
      -0.018791984708947634d0 0.22056052261004677d0 0.22335897426518092d0
      -0.2607789294947696d0 -0.4664595920840015d0 -0.12180249629317684d0
      -0.19215948583755024d0 -0.10522095728881921d0 0.0010170447344466477d0
      -0.009000800592536167d0 -0.09875066133137891d0 -0.3220371148345146d0
      -0.052699127737915324d0 0.19866225571534438d0 0.09891677565112698d0
      -0.11473291424347934d0 -0.11030193085261719d0 -0.09509080676285352d0
      -0.07310502620368269d0 -0.10203579932658502d0 -0.06055926530342877d0
      -0.04763098337553357d0 0.0d0 0.11875853472338706d0 -0.43056476304290436d0
      0.19649544524338208d0 -0.3171348053676226d0 -0.24464063209385045d0
      -0.2678519891453484d0 -0.05136453458549955d0 -0.05740290389761139d0
      -0.1443723763841522d0 -0.04310262695138283d0 -0.14407312915069334d0
      -0.2537762422445041d0 0.013314108253626321d0 -0.2064635786557003d0
      0.21090720268344784d0 -0.13794812179323712d0 0.08180150330710746d0
      -0.26658054310351664d0 -0.06083006948537366d0 -0.10912011027142135d0
      0.014130277565334224d0 0.09050726713651203d0 -0.0695463659288662d0
      -0.010150181435273008d0 -0.033789530431050256d0 -0.07152540781994178d0
      -0.016378799266989246d0 -0.008247583866457126d0 0.0d0 -0.011465892892965707d0
      0.020801654476260065d0 -6.524200701080515d-5 -0.021063113126076696d0
      -0.020865118917193403d0 -0.018140311873895018d0 0.0d0 -0.010462223952850437d0
      0.009200104855950637d0 0.012759113605810305d0 -0.03009144074930959d0
      -0.019086631968453036d0 -0.03048238691875727d0 -0.13885589686478697d0
      0.01047473024758489d0 -0.010413797486794774d0 -0.010473885058452311d0
      -0.02381497273318185d0 -0.010472110960605902d0 -3.101267084657952d-7
      -0.018090170066433802d0 0.0d0 -0.004680877733711436d0 -0.01047178780163071d0
      -0.04864277351043214d0 -0.010468781799816512d0 0.0d0 -0.01855291347487044d0
      0.010454803973065837d0 -0.06692309044948563d0 0.0d0 0.0d0 0.0d0 0.0d0)
    :test #'approximately-equal)

(is (clol::sparse-lr+adam-bias sparse-lr+adam-learner)
    -0.10311418846510162d0
    :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test sparse-lr+adam-learner a1a.sp)
      (list accuracy n-correct n-total))
    '(82.24299 1320 1605)
    :test #'approximately-equal)

;;;;;;;;;;;;;;;; Dence, Multiclass ;;;;;;;;;;;;;;;;;
(format t ";;;;;;;;;;;;;;;; Dence, Multiclass ;;;;;;;;;;;;;;;;;~%")

;;; Read libsvm dataset (Dence, Multiclass)
(format t ";;; Read libsvm dataset (Dence, Multiclass)~%")
(defvar iris)
(defparameter iris-dim 4)
(is (progn
      (setf iris
	    (read-data (merge-pathnames #P"t/dataset/iris.scale"
                                        (asdf:system-source-directory :cl-online-learning-test))
                       iris-dim :multiclass-p t))
      (car iris))
    '(0 . #(-0.5555559992790222d0 0.25d0 -0.8644070029258728d0 -0.9166669845581055d0))
    :test #'equalp)

;;;;;;;;;;;;;;;; Dence, Multiclass (one-vs-rest) ;;;;;;;;;;;;;;;;;

;;; Perceptron learner (Dence, Multiclass (one-vs-rest))
(format t ";;; Perceptron learner (Dence, Multiclass (one-vs-rest))~%")
(defvar mulc-perceptron-learner)

(is (progn
      (setf mulc-perceptron-learner (make-one-vs-rest iris-dim 3 'perceptron))
      (train mulc-perceptron-learner iris)
      (clol::perceptron-weight
       (aref (clol::one-vs-rest-learners-vector mulc-perceptron-learner) 0)))
    #(-0.7222230136394501d0 1.0d0 -1.1355930995196104d0 -1.000000242764763d0)
    :test #'approximately-equal)

(is (clol::perceptron-bias
     (aref (clol::one-vs-rest-learners-vector mulc-perceptron-learner) 0))
    -1.0d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-perceptron-learner iris)
      (list accuracy n-correct n-total))
    '(66.66667 100 150)
    :test #'approximately-equal)

;;; AROW learner (Dence, Multiclass (one-vs-rest))
(format t ";;; AROW learner (Dence, Multiclass (one-vs-rest))~%")
(defvar mulc-arow-learner)

(is (progn
      (setf mulc-arow-learner (make-one-vs-rest iris-dim 3 'arow 10d0))
      (train mulc-arow-learner iris)
      (clol::arow-weight
       (aref (clol::one-vs-rest-learners-vector mulc-arow-learner) 0)))
    #(-0.13031670048902266d0 0.7669881007654955d0 -0.4840288207710034d0 -0.400763484835848d0)
    :test #'approximately-equal)

(is (clol::arow-bias
     (aref (clol::one-vs-rest-learners-vector mulc-arow-learner) 0))
    -0.3442333370778729d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-arow-learner iris)
      (list accuracy n-correct n-total))
    '(73.333336 110 150)
    :test #'approximately-equal)

;;; SCW-I learner (Dence, Multiclass (one-vs-rest))
(format t ";;; SCW-I learner (Dence, Multiclass (one-vs-rest))~%")
(defvar mulc-scw-learner)

(is (progn
      (setf mulc-scw-learner (make-one-vs-rest iris-dim 3 'scw 0.9d0 0.1d0))
      (train mulc-scw-learner iris)
      (clol::scw-weight
       (aref (clol::one-vs-rest-learners-vector mulc-scw-learner) 0)))
    #(-0.3232863624199869d0 1.0381009901897549d0 -0.9833106495827619d0 -0.7999598271841444d0)
    :test #'approximately-equal)

(is (clol::scw-bias
     (aref (clol::one-vs-rest-learners-vector mulc-scw-learner) 0))
    -0.24043563357905703d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-scw-learner iris)
      (list accuracy n-correct n-total))
    '(88.666664 133 150)
    :test #'approximately-equal)

;;; LR+SGD learner (Dence, Multiclass (one-vs-rest))
(format t ";;; LR+SGD learner (Dence, Multiclass (one-vs-rest))~%")
(defvar mulc-lr+sgd-learner)

(is (progn
      (setf mulc-lr+sgd-learner (make-one-vs-rest iris-dim 3 'lr+sgd 0.00001d0 0.01d0))
      (train mulc-lr+sgd-learner iris)
      (clol::lr+sgd-weight
       (aref (clol::one-vs-rest-learners-vector mulc-lr+sgd-learner) 0)))
    #(-0.15150316153431137d0 0.1683222211892617d0 -0.30545788488251907d0
      -0.30367035393883063d0)
    :test #'approximately-equal)

(is (clol::lr+sgd-bias
     (aref (clol::one-vs-rest-learners-vector mulc-lr+sgd-learner) 0))
    -0.23402926740095747d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-lr+sgd-learner iris)
      (list accuracy n-correct n-total))
    '(77.33333 116 150)
    :test #'approximately-equal)

;;; LR+ADAM learner (Dence, Multiclass (one-vs-rest))
(format t ";;; LR+ADAM learner (Dence, Multiclass (one-vs-rest))~%")
(defvar mulc-lr+adam-learner)

(is (progn
      (setf mulc-lr+adam-learner (make-one-vs-rest iris-dim 3 'lr+adam 0.000001d0 0.001d0 1.d-8 0.9d0 0.99d0))
      (train mulc-lr+adam-learner iris)
      (clol::lr+adam-weight
       (aref (clol::one-vs-rest-learners-vector mulc-lr+adam-learner) 0)))
    #(-0.07008647029789696d0 0.09384330828865659d0 -0.10773330977595216d0
      -0.10142134921572328d0)
    :test #'approximately-equal)

(is (clol::lr+adam-bias
     (aref (clol::one-vs-rest-learners-vector mulc-lr+adam-learner) 0))
    -0.03275341035236527d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-lr+adam-learner iris)
      (list accuracy n-correct n-total))
    '(84.66667 127 150)
    :test #'approximately-equal)

;;;;;;;;;;;;;;;; Dence, Multiclass (one-vs-one) ;;;;;;;;;;;;;;;;;

;;; Perceptron learner (Dence, Multiclass (one-vs-one))
(format t ";;; Perceptron learner (Dence, Multiclass (one-vs-one))~%")
(is (progn
      (setf mulc-perceptron-learner (make-one-vs-one iris-dim 3 'perceptron))
      (train mulc-perceptron-learner iris)
      (clol::perceptron-weight
       (aref (clol::one-vs-one-learners-vector mulc-perceptron-learner) 0)))
    #(-0.7222230136394501d0 1.0d0 -1.1355930995196104d0 -1.000000242764763d0)
    :test #'approximately-equal)

(is (clol::perceptron-bias
     (aref (clol::one-vs-one-learners-vector mulc-perceptron-learner) 0))
    -1.0d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-perceptron-learner iris)
      (list accuracy n-correct n-total))
    '(78.0 117 150)
    :test #'approximately-equal)

;;; AROW learner (Dence, Multiclass (one-vs-one))
(format t ";;; AROW learner (Dence, Multiclass (one-vs-one))~%")
(is (progn
      (setf mulc-arow-learner (make-one-vs-one iris-dim 3 'arow 10d0))
      (train mulc-arow-learner iris)
      (clol::arow-weight
       (aref (clol::one-vs-one-learners-vector mulc-arow-learner) 0)))
    #(-0.08833179254688758d0 0.7672046131306832d0 -0.4215042849243659d0 -0.3356150838390857d0)
    :test #'approximately-equal)

(is (clol::arow-bias
     (aref (clol::one-vs-one-learners-vector mulc-arow-learner) 0))
    -0.3038759171411332d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-arow-learner iris)
      (list accuracy n-correct n-total))
    '(89.33333 134 150)
    :test #'approximately-equal)

;;; SCW-I learner (Dence, Multiclass (one-vs-one))
(format t ";;; SCW-I learner (Dence, Multiclass (one-vs-one))~%")
(is (progn
      (setf mulc-scw-learner (make-one-vs-one iris-dim 3 'scw 0.9d0 0.1d0))
      (train mulc-scw-learner iris)
      (clol::scw-weight
       (aref (clol::one-vs-one-learners-vector mulc-scw-learner) 0)))
    #(-0.19852027692174887d0 1.0903772597349175d0 -0.8450390219534784d0 -0.6723408802848536d0)
    :test #'approximately-equal)

(is (clol::scw-bias
     (aref (clol::one-vs-one-learners-vector mulc-scw-learner) 0))
    -0.21044518381781008d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-scw-learner iris)
      (list accuracy n-correct n-total))
    '(86.666664 130 150)
    :test #'approximately-equal)

;;; LR+SGD learner (Dence, Multiclass (one-vs-one))
(format t ";;; LR+SGD learner (Dence, Multiclass (one-vs-one))~%")
(is (progn
      (setf mulc-lr+sgd-learner (make-one-vs-one iris-dim 3 'lr+sgd 0.00001d0 0.01d0))
      (train mulc-lr+sgd-learner iris)
      (clol::lr+sgd-weight
       (aref (clol::one-vs-one-learners-vector mulc-lr+sgd-learner) 0)))
    #(-0.10322043002153082d0 0.1312568047049863d0 -0.20361859574889082d0
      -0.19037167002757865d0)
    :test #'approximately-equal)

(is (clol::lr+sgd-bias
     (aref (clol::one-vs-one-learners-vector mulc-lr+sgd-learner) 0))
    -0.04390114607553918d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-lr+sgd-learner iris)
      (list accuracy n-correct n-total))
    '(78.66667 118 150)
    :test #'approximately-equal)

;;; LR+ADAM learner (Dence, Multiclass (one-vs-one))
(format t ";;; LR+ADAM learner (Dence, Multiclass (one-vs-one))~%")
(is (progn
      (setf mulc-lr+adam-learner (make-one-vs-one iris-dim 3 'lr+adam 0.000001d0 0.001d0 1.d-8 0.9d0 0.99d0))
      (train mulc-lr+adam-learner iris)
      (clol::lr+adam-weight
       (aref (clol::one-vs-one-learners-vector mulc-lr+adam-learner) 0)))
    #(-0.04980132608223872d0 0.06574979405524517d0 -0.06675791521848336d0
      -0.060556671425120535d0)
    :test #'approximately-equal)

(is (clol::lr+adam-bias
     (aref (clol::one-vs-one-learners-vector mulc-lr+adam-learner) 0))
    0.015819005389377694d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-lr+adam-learner iris)
      (list accuracy n-correct n-total))
    '(76.666664 115 150)
    :test #'approximately-equal)

;;;;;;;;;;;;;;;; Sparse, Multiclass ;;;;;;;;;;;;;;;;;
(format t ";;;;;;;;;;;;;;;; Sparse, Multiclass ;;;;;;;;;;;;;;;;;~%")

;;; Read libsvm dataset (Sparse, Multiclass)
(format t ";;; Read libsvm dataset (Sparse, Multiclass)~%")
(defvar iris.sp)
(is (progn
      (setf iris.sp
	    (read-data (merge-pathnames #P"t/dataset/iris.scale"
                                        (asdf:system-source-directory :cl-online-learning-test))
                       iris-dim :sparse-p t :multiclass-p t))
      (sparse-vector-value-vector (cdar iris.sp)))
    #(-0.5555559992790222d0 0.25d0 -0.8644070029258728d0 -0.9166669845581055d0)
    :test #'equalp)

;;;;;;;;;;;;;;;; Sparse, Multiclass (one-vs-rest) ;;;;;;;;;;;;;;;;;

;;; Perceptron learner (Sparse, Multiclass (one-vs-rest))
(format t ";;; Perceptron learner (Sparse, Multiclass (one-vs-rest))~%")
(defvar mulc-perceptron-learner.sp)

(is (progn
      (setf mulc-perceptron-learner.sp (make-one-vs-rest iris-dim 3 'sparse-perceptron))
      (train mulc-perceptron-learner.sp iris.sp)
      (clol::sparse-perceptron-weight
       (aref (clol::one-vs-rest-learners-vector mulc-perceptron-learner.sp) 0)))
    #(-0.7222230136394501d0 1.0d0 -1.1355930995196104d0 -1.000000242764763d0)
    :test #'approximately-equal)

(is (clol::sparse-perceptron-bias
     (aref (clol::one-vs-rest-learners-vector mulc-perceptron-learner.sp) 0))
    -1.0d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-perceptron-learner.sp iris.sp)
      (list accuracy n-correct n-total))
    '(66.66667 100 150)
    :test #'approximately-equal)

;;; AROW learner (Sparse, Multiclass (one-vs-rest))
(format t ";;; AROW learner (Sparse, Multiclass (one-vs-rest))~%")
(defvar mulc-arow-learner.sp)

(is (progn
      (setf mulc-arow-learner.sp (make-one-vs-rest iris-dim 3 'sparse-arow 10d0))
      (train mulc-arow-learner.sp iris.sp)
      (clol::sparse-arow-weight
       (aref (clol::one-vs-rest-learners-vector mulc-arow-learner.sp) 0)))
    #(-0.13031670048902266d0 0.7669881007654955d0 -0.4840288207710034d0 -0.400763484835848d0)
    :test #'approximately-equal)

(is (clol::sparse-arow-bias
     (aref (clol::one-vs-rest-learners-vector mulc-arow-learner.sp) 0))
    -0.3442333370778729d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-arow-learner.sp iris.sp)
      (list accuracy n-correct n-total))
    '(73.333336 110 150)
    :test #'approximately-equal)

;;; SCW-I learner (Sparse, Multiclass (one-vs-rest))
(format t ";;; SCW-I learner (Sparse, Multiclass (one-vs-rest))~%")
(defvar mulc-scw-learner.sp)

(is (progn
      (setf mulc-scw-learner.sp (make-one-vs-rest iris-dim 3 'sparse-scw 0.9d0 0.1d0))
      (train mulc-scw-learner.sp iris.sp)
      (clol::sparse-scw-weight
       (aref (clol::one-vs-rest-learners-vector mulc-scw-learner.sp) 0)))
    #(-0.3232863624199869d0 1.0381009901897549d0 -0.9833106495827619d0 -0.7999598271841444d0)
    :test #'approximately-equal)

(is (clol::sparse-scw-bias
     (aref (clol::one-vs-rest-learners-vector mulc-scw-learner.sp) 0))
    -0.24043563357905703d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-scw-learner.sp iris.sp)
      (list accuracy n-correct n-total))
    '(88.666664 133 150)
    :test #'approximately-equal)

;;; LR+SGD learner (Sparse, Multiclass (one-vs-rest))
(format t ";;; LR+SGD learner (Sparse, Multiclass (one-vs-rest))~%")
(defvar mulc-lr+sgd-learner.sp)

(is (progn
      (setf mulc-lr+sgd-learner.sp (make-one-vs-rest iris-dim 3 'sparse-lr+sgd  0.00001d0 0.01d0))
      (train mulc-lr+sgd-learner.sp iris.sp)
      (clol::sparse-lr+sgd-weight
       (aref (clol::one-vs-rest-learners-vector mulc-lr+sgd-learner.sp) 0)))
    #(-0.15150316153431137d0 0.1683222211892617d0 -0.30545788488251907d0
      -0.30367035393883063d0)
    :test #'approximately-equal)

(is (clol::sparse-lr+sgd-bias
     (aref (clol::one-vs-rest-learners-vector mulc-lr+sgd-learner.sp) 0))
    -0.23402926740095747d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-lr+sgd-learner.sp iris.sp)
      (list accuracy n-correct n-total))
    '(77.33333 116 150)
    :test #'approximately-equal)

;;; LR+ADAM learner (Sparse, Multiclass (one-vs-rest))
(format t ";;; LR+ADAM learner (Sparse, Multiclass (one-vs-rest))~%")
(defvar mulc-lr+adam-learner.sp)

(is (progn
      (setf mulc-lr+adam-learner.sp (make-one-vs-rest iris-dim 3 'sparse-lr+adam
                                                      0.000001d0 0.001d0 1.d-8 0.9d0 0.99d0))
      (train mulc-lr+adam-learner.sp iris.sp)
      (clol::sparse-lr+adam-weight
       (aref (clol::one-vs-rest-learners-vector mulc-lr+adam-learner.sp) 0)))
    #(-0.07008647029789696d0 0.09384330828865659d0 -0.10773330977595216d0
      -0.10142134921572328d0)
    :test #'approximately-equal)

(is (clol::sparse-lr+adam-bias
     (aref (clol::one-vs-rest-learners-vector mulc-lr+adam-learner.sp) 0))
    -0.03275341035236527d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-lr+adam-learner.sp iris.sp)
      (list accuracy n-correct n-total))
    '(84.66667 127 150)
    :test #'approximately-equal)

;;;;;;;;;;;;;;;; Sparse, Multiclass (one-vs-one) ;;;;;;;;;;;;;;;;;

;;; Perceptron learner (Sparse, Multiclass (one-vs-one))
(format t ";;; Perceptron learner (Sparse, Multiclass (one-vs-one))~%")
(is (progn
      (setf mulc-perceptron-learner.sp (make-one-vs-one iris-dim 3 'sparse-perceptron))
      (train mulc-perceptron-learner.sp iris.sp)
      (clol::sparse-perceptron-weight
       (aref (clol::one-vs-one-learners-vector mulc-perceptron-learner.sp) 0)))
    #(-0.7222230136394501d0 1.0d0 -1.1355930995196104d0 -1.000000242764763d0)
    :test #'approximately-equal)

(is (clol::sparse-perceptron-bias
     (aref (clol::one-vs-one-learners-vector mulc-perceptron-learner.sp) 0))
    -1.0d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-perceptron-learner.sp iris.sp)
      (list accuracy n-correct n-total))
    '(78.0 117 150)
    :test #'approximately-equal)

;;; AROW learner (Sparse, Multiclass (one-vs-one))
(format t ";;; AROW learner (Sparse, Multiclass (one-vs-one))~%")
(is (progn
      (setf mulc-arow-learner.sp (make-one-vs-one iris-dim 3 'sparse-arow 10d0))
      (train mulc-arow-learner.sp iris.sp)
      (clol::sparse-arow-weight
       (aref (clol::one-vs-one-learners-vector mulc-arow-learner.sp) 0)))
    #(-0.08833179254688758d0 0.7672046131306832d0 -0.4215042849243659d0 -0.3356150838390857d0)
    :test #'approximately-equal)

(is (clol::sparse-arow-bias
     (aref (clol::one-vs-one-learners-vector mulc-arow-learner.sp) 0))
    -0.3038759171411332d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-arow-learner.sp iris.sp)
      (list accuracy n-correct n-total))
    '(89.33333 134 150)
    :test #'approximately-equal)

;;; SCW-I learner (Sparse, Multiclass (one-vs-one))
(format t ";;; SCW-I learner (Sparse, Multiclass (one-vs-one))~%")
(is (progn
      (setf mulc-scw-learner.sp (make-one-vs-one iris-dim 3 'sparse-scw 0.9d0 0.1d0))
      (train mulc-scw-learner.sp iris.sp)
      (clol::sparse-scw-weight
       (aref (clol::one-vs-one-learners-vector mulc-scw-learner.sp) 0)))
    #(-0.19852027692174887d0 1.0903772597349175d0 -0.8450390219534784d0 -0.6723408802848536d0)
    :test #'approximately-equal)

(is (clol::sparse-scw-bias
     (aref (clol::one-vs-one-learners-vector mulc-scw-learner.sp) 0))
    -0.21044518381781008d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-scw-learner.sp iris.sp)
      (list accuracy n-correct n-total))
    '(86.666664 130 150)
    :test #'approximately-equal)

;;; LR+SGD learner (Sparse, Multiclass (one-vs-one))
(format t ";;; LR+SGD learner (Sparse, Multiclass (one-vs-one))~%")
(is (progn
      (setf mulc-lr+sgd-learner.sp (make-one-vs-one iris-dim 3 'sparse-lr+sgd  0.00001d0 0.01d0))
      (train mulc-lr+sgd-learner.sp iris.sp)
      (clol::sparse-lr+sgd-weight
       (aref (clol::one-vs-one-learners-vector mulc-lr+sgd-learner.sp) 0)))
    #(-0.10322043002153082d0 0.1312568047049863d0 -0.20361859574889082d0
      -0.19037167002757865d0)
    :test #'approximately-equal)

(is (clol::sparse-lr+sgd-bias
     (aref (clol::one-vs-one-learners-vector mulc-lr+sgd-learner.sp) 0))
    -0.04390114607553918d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-lr+sgd-learner.sp iris.sp)
      (list accuracy n-correct n-total))
    '(78.66667 118 150)
    :test #'approximately-equal)

;;; LR+ADAM learner (Sparse, Multiclass (one-vs-one))
(format t ";;; LR+ADAM learner (Sparse, Multiclass (one-vs-one))~%")
(is (progn
      (setf mulc-lr+adam-learner.sp (make-one-vs-one iris-dim 3 'sparse-lr+adam
                                                      0.000001d0 0.001d0 1.d-8 0.9d0 0.99d0))
      (train mulc-lr+adam-learner.sp iris.sp)
      (clol::sparse-lr+adam-weight
       (aref (clol::one-vs-one-learners-vector mulc-lr+adam-learner.sp) 0)))
    #(-0.04980132608223872d0 0.06574979405524517d0 -0.06675791521848336d0
      -0.060556671425120535d0)
    :test #'approximately-equal)

(is (clol::sparse-lr+adam-bias
     (aref (clol::one-vs-one-learners-vector mulc-lr+adam-learner.sp) 0))
    0.015819005389377694d0 :test #'approximately-equal)

(is (multiple-value-bind (accuracy n-correct n-total)
	(test mulc-lr+adam-learner.sp iris.sp)
      (list accuracy n-correct n-total))
    '(76.666664 115 150)
    :test #'approximately-equal)

;;; ende
(finalize)
